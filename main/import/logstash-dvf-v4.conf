input {
  # Lecture depuis l'entrée standard
  stdin {
  }
}

filter {

  # On élimine les entêtes
  if [message] =~ /^id_mutation/ {
    drop {
    }
  }

  # Retrait des caractères spéciaux type <CR>, tab, espace etc
  mutate {
    strip => "message"
  }

  # Puis on décode le CSV en spécifiant les champs
  csv {
    columns => [
    "id_mutation", "date_mutation", "numero_disposition", "nature_mutation", "valeur_fonciere",
    "adresse_numero", "adresse_suffixe", "adresse_nom_voie", "adresse_code_voie", "code_postal",
    "code_commune", "nom_commune", "code_departement", "ancien_code_commune", "ancien_nom_commune",
    "id_parcelle", "ancien_id_parcelle", "numero_volume", "lot1_numero", "lot1_surface_carrez",
    "lot2_numero", "lot2_surface_carrez", "lot3_numero", "lot3_surface_carrez", "lot4_numero",
    "lot4_surface_carrez", "lot5_numero", "lot5_surface_carrez", "nombre_lots", "code_type_local",
    "type_local", "surface_reelle_bati", "nombre_pieces_principales", "code_nature_culture",
    "nature_culture", "code_nature_culture_speciale", "nature_culture_speciale", "surface_terrain",
    "longitude", "latitude"]
  }

  # Décodage de l'identifiant de parcelle
  grok {
    match => {
      id_parcelle => "^(?<parcelle_code_insee>[0-9]{5})(?<parcelle_prefixe>[0-9]{3})(?<parcelle_section>([0-9][A-Z]|[A-Z]{2}))(?<parcelle_numero>[0-9]+)$"
    }
  }

  # Création du sous-objet parcelle
  mutate {
    rename => {
      "parcelle_code_insee" => "[parcelle][code_insee]"
      "parcelle_prefixe" => "[parcelle][prefixe]"
      "parcelle_section" => "[parcelle][section]"
      "parcelle_numero" => "[parcelle][numero]"
      "id_parcelle" => "[parcelle][id]"
    }
  }

  # Décodage de l'ancien id de parcelle, s'il existe
  if [ancien_id_parcelle] {
    grok {
      match => {
        ancien_id_parcelle => "^(?<ancien_parcelle_code_insee>[0-9]{5})(?<ancien_parcelle_prefixe>[0-9]{3})(?<ancien_parcelle_section>([0-9][A-Z]|[A-Z]{2}))(?<ancien_parcelle_numero>[0-9]+)$"
      }
    }

    mutate {
      rename => {
        "ancien_parcelle_code_insee" => "[ancienne_parcelle][code_insee]"
        "ancien_parcelle_prefixe" => "[ancienne_parcelle][prefixe]"
        "ancien_parcelle_section" => "[ancienne_parcelle][section]"
        "ancien_parcelle_numero" => "[ancienne_parcelle][numero]"
        "ancien_id_parcelle" => "[ancienne_parcelle][id]"
      }
    }
  }

  # Construction d'un champ adresse regroupe toutes les informations
  if [adresse_suffixe] and [adresse_numero] {
    mutate {
      add_field => {
        "adresse_complete" => "%{adresse_numero} %{adresse_suffixe} %{adresse_nom_voie}, %{code_postal} %{nom_commune}"
      }
    }
  }
  else if [adresse_numero] {
    mutate {
      add_field => {
        "adresse_complete" => "%{adresse_numero} %{adresse_nom_voie}, %{code_postal} %{nom_commune}"
      }
    }
  }
  else {
    mutate {
      add_field => {
        "adresse_complete" => "%{adresse_nom_voie}, %{code_postal} %{nom_commune}"
      }
    }
  }

  # Regroupement des champs de l'adresse dans un sous-objet
  mutate {
    rename => {
      "adresse_numero" => "[adresse][numero]"
      "adresse_suffixe" => "[adresse][suffixe]"
      "adresse_nom_voie" => "[adresse][nom_voie]"
      "code_postal" => "[adresse][code_postal]"
      "nom_commune" => "[adresse][nom_commune]"
      "adresse_complete" => "[adresse][adresse_complete]"
      "code_commune" => "[adresse][code_commune]"
      "adresse_code_voie" => "[adresse][code_voie]"
      "ancien_nom_commune" => "[adresse][ancien_nom_commune]"
      "ancien_code_commune" => "[adresse][ancien_code_commune]"
    }
  }

  # Regroupement des informations sur le bâti
  mutate {
    rename => {
      "nombre_pieces_principales" => "[bati][nombre_pieces_principales]"
      "code_type_local" => "[bati][code_type_local]"
      "type_local" => "[bati][type_local]"
      "surface_reelle_bati" => "[bati][surface_reelle]"
    }
  }

  # Regroupement des informations sur le terrain
  mutate {
    rename => {
      "code_nature_culture" => "[terrain][code_nature_culture]"
      "code_nature_culture_speciale" => "[terrain][code_nature_culture_speciale]"
      "nature_culture" => "[terrain][nature_culture]"
      "nature_culture_speciale" => "[terrain][nature_culture_speciale]"
      "surface_terrain" => "[terrain][surface_terrain]"
    }
  }

  # Reconstruction au format {"lon":"12.3", "lat":"12.3"} qui permettra de créer un objet geo_point
  if [longitude] and [latitude] {
    mutate {
      rename =>  {
        "longitude" => "[localisation][lon]"
        "latitude" => "[localisation][lat]"
      }
    }
  }
  else {
    mutate {
      remove_field => ["latitude", "longitude"]
    }
  }

  # Déplacement des informations des lots dans des objets dédiés
  mutate {
    rename => {
      "lot1_numero" => "[lot1][numero]"
      "lot1_surface_carrez" => "[lot1][surface_carrez]"
      "lot2_numero" => "[lot2][numero]"
      "lot2_surface_carrez" => "[lot2][surface_carrez]"
      "lot3_numero" => "[lot3][numero]"
      "lot3_surface_carrez" => "[lot3][surface_carrez]"
      "lot4_numero" => "[lot4][numero]"
      "lot4_surface_carrez" => "[lot4][surface_carrez]"
      "lot5_numero" => "[lot5][numero]"
      "lot5_surface_carrez" => "[lot5][surface_carrez]"
    }

  }

  # Et création d'un champ contenant les informations des lots
  ruby {
    code => "
      l = Array.new
      if (event.get('[lot1][numero]') != nil)
      then l << event.get('[lot1]')
      end
      if (event.get('[lot2][numero]') != nil)
      then l << event.get('[lot2]')
      end
      if (event.get('[lot3][numero]') != nil)
      then l << event.get('[lot3]')
      end
      if (event.get('[lot4][numero]') != nil)
      then l << event.get('[lot4]')
      end
      if (event.get('[lot5][numero]') != nil)
      then l << event.get('[lot5]')
      end

      event.set('lots', l)
    "
  }

  # Retrait des champs spéciaux inutiles
  mutate {
    remove_field => ["host", "@timestamp", "lot1", "lot2", "lot3", "lot4", "lot5"]
  }
}

# Send the logs to Elasticsearch and print dots to display progress
output {
  # Sortie dans la console pour le débogage
  # stdout {
  # 	codec => json {
  # 	}
  # }

  # Sortie console sous forme de points pour le suivi de l'avancement
  stdout {
    codec => dots
  }

  # Sortie dans finale dans Elasticsearch avec support du nouveau template
  elasticsearch {
    hosts => "localhost:9200"
    user => "elastic"
    # Cette variable sera remplie par le fichier .env
    password => "${ELASTIC_PASSWORD}"
    ssl => true
    ssl_certificate_verification => false
    index => "dvf-v4-2020-dpt-01"
  }
}